<?xml version="1.0" encoding="UTF-8"?>

<Metrics>

    <!--
    <CommandMetric Name='MEM_VSZ'>
        <Command>scriptsDir/vsz.sh</Command>
        <Alert Activate='true' ComparisonType='gt'>
            <WarningThreshold Value='100000000'>
                <ActionScript>mem_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
    </CommandMetric>
    -->

	<OSMetric Name='TOTAL_CPU_USER' Activate='false' Description='TOTAL_CPU_USER'>
	</OSMetric>
	<OSMetric Name='TOTAL_CPU_KERNEL' Activate='false'>
	</OSMetric>
	<OSMetric Name='PROC_CPU_USER' Activate='true'>
		<Alert Activate='true' ComparisonType='gt'>
            <WarningThreshold Value='80' >
                <ActionScript>cpu_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
	</OSMetric>
	<OSMetric Name='PROC_CPU_KERNEL' Activate='true'>
	</OSMetric>
	
	<OSMetric Name='TOTAL_MEM_FREE' Activate='true'>
	</OSMetric>
	<OSMetric Name='TOTAL_MEM_FREE_PERCENTAGE' Activate='true'>
	</OSMetric>
	
    <OSMetric Name='PROC_MEM_USED' Activate='true'> <!-- This means RSS -->
		<Alert Activate='true' ComparisonType='gt'>
            <WarningThreshold Value='100000000'> <!-- in kB -->
                <ActionScript>mem_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
	</OSMetric>
	<OSMetric Name='PROC_MEM_USED_PERCENTAGE' Activate='true'>
	</OSMetric>

	<OSMetric Name='SWAP_FREE' Activate='true'>
	</OSMetric>
	<OSMetric Name='SWAP_FREE_PERCENTAGE' Activate='true'>
	</OSMetric>
	
	<OSMetric Name='DISK_FREE' Activate='false'>
        <Disk Name='disk1'>/home</Disk>
	</OSMetric>
	<OSMetric Name='DISK_FREE_PERCENTAGE' Activate='true'>
        <Disk Name='disk1'>/home</Disk>
        <Alert Activate='true' ComparisonType='lt'>
            <WarningThreshold Value='10' />
        </Alert>
	</OSMetric>
	
    <SQLMetric Name='LOGFILE_COUNT' Activate='true'>
        <Query>select (select OLDEST_LOGFILE_NO from v$log) as old_log,
            (select current_logfile from v$archive) as curr_log,
            ((select current_logfile from v$archive) - (select OLDEST_LOGFILE_NO from v$log)) as log_gap
            from dual</Query>
        <Alert Activate='true' ComparisonColumn='LOG_GAP' ComparisonType='gt'>
            <WarningThreshold Value='500' >
                <ActionScript>logfile_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
    </SQLMetric>

    <SQLMetric Name='MEMSTAT_SUM' Activate='true'>
        <Query>select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,
                      trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb
               from v$memstat</Query>
        <Alert Activate='true' ComparisonColumn='MAX_TOTAL_MB' ComparisonType='gt'>
            <WarningThreshold Value='7000' />
        </Alert>
    </SQLMetric>

    <SQLMetric Name='MEMSTAT_LIST' Activate='true'>
        <Query>SELECT * FROM v$MEMSTAT ORDER BY 4 DESC LIMIT 30</Query>
    </SQLMetric>

    <SQLMetric Name='MEM_DATABASE_USAGE' Activate='true' Interval='30'>
        <Query>select
            trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
            trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
            from v$database</Query>
        <Alert Activate='true' ComparisonColumn='ALLOC_MEM_MB' ComparisonType='GT'>
            <CriticalThreshold Value='8000' >
                <ActionScript>db_usage.sh</ActionScript>
            </CriticalThreshold>
        </Alert>
    </SQLMetric>

    <SQLMetric Name='SYSSTAT_LIST' Activate='true'>
        <Query><![CDATA[SELECT * FROM v$SYSSTAT WHERE SEQNUM < 88]]></Query>
    </SQLMetric>

    <SQLMetric Name='MEM_TBL_USAGE' Activate='true'>
        <Query>select
          trunc(sum(fixed_alloc_mem+var_alloc_mem)/1024/1024,2) as alloc_mem_mb,
          trunc(sum(fixed_used_mem+var_used_mem)/1024/1024,2) as used_mem_mb
       from v$memtbl_info</Query>
        <Alert Activate='true' ComparisonColumn='ALLOC_MEM_MB' ComparisonType='GT'>
            <WarningThreshold Value='20480'>
                <ActionScript>mem_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
    </SQLMetric>

    <SQLMetric Name='TABLESPACE_USAGE' Activate='true'>
        <Query>SELECT id tbs_id,
            decode(type, 3, 'DISK_SYS_DATA', 4, 'DISK_USER_DATA', 5, 'DISK_SYS_TEMP', 6, 'DISK_USER_TEMP', 7, 'DISK_UNDO') tbs_type,
            name tbs_name, ROUND(d.max * page_size / 1024 /1024, 2) 'MAX(M)',
            ROUND(total_page_count * page_size / 1024 / 1024, 2) 'TOTAL(M)',
            decode(type, 7, ROUND(( SELECT (sum(total_extent_count*page_count_in_extent) * page_size)/1024/1024 FROM v$udsegs ) +
            ( SELECT (sum(total_extent_count*page_count_in_extent) * page_size)/1024/1024 FROM v$tssegs),2),
            ROUND(  allocated_page_count * page_size / 1024 / 1024,2)) 'ALLOC(M)',
            decode(type, 7, ROUND(((SELECT sum(total_extent_count*page_count_in_extent) FROM v$udsegs) +
            (SELECT sum(total_extent_count*page_count_in_extent) FROM v$tssegs)) / d.max* 100, 2),
            ROUND(allocated_page_count / d.max * 100, 2)) 'USAGE(%)',
            decode(state,1,'OFFLINE',2,'ONLINE',5,'OFFLINE BACKUP',6,'ONLINE BACKUP',128,'DROPPED', 'DISCARDED') state, d.autoextend
            FROM v$tablespaces t, ( SELECT spaceid, sum(decode(maxsize, 0, currsize, maxsize)) as max,
            decode(max(autoextend),1,'ON','OFF') 'AUTOEXTEND'
            FROM v$datafiles
            group by spaceid) d
            WHERE t.id = d.spaceid</Query>
        <Alert Activate='true' ComparisonColumn='USAGE(%)' ComparisonType='GT'>
            <WarningThreshold Value='80' />
        </Alert>
    </SQLMetric>

    <SQLMetric Name='SEGMENT_USAGE' Activate='false'>
        <Query>select name, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name</Query>
    </SQLMetric>

    <SQLMetric Name='UNDO_USAGE' Activate='false'>
        <Query>select sum(total_page_count), /*sum(free_page_count), (sum(free_page_count)/sum(total_page_count))*100, */sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name</Query>
    </SQLMetric>

    <SQLMetric Name='DISK_TBL_USAGE' Activate='true'>
        <Query>select name, round(sum(DISK_TOTAL_PAGE_CNT)*8/1024) AS 'USED(M)' 
               from v$disktbl_info a, v$tablespaces b 
               where a.TABLESPACE_ID=b.id group by name
               order by name</Query>
    </SQLMetric>

    <SQLMetric Name='TABLE_USAGE' Activate='false'>
        <Query>select
                  table_name,
                  FIXED_ALLOC_MEM+VAR_ALLOC_MEM alloc,
                  (FIXED_ALLOC_MEM+VAR_ALLOC_MEM)-(FIXED_USED_MEM+VAR_USED_MEM) free
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2</Query>
        <Alert Activate='false' ComparisonColumn='??' ComparisonType='GT'>
            <WarningThreshold Value='20480'>
                <ActionScript>mem_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
    </SQLMetric>

    <SQLMetric Name='SERVICE_THREAD_MODE' Activate='true'>
        <Query>select run_mode, count(*) cnt from V$service_thread group by run_mode order by 1</Query>
    </SQLMetric>

    <SQLMetric Name='SERVICE_THREAD_STATE' Activate='true'>
        <Query>select state, count(*) cnt from V$service_thread group by state order by 1</Query>
    </SQLMetric>

    <SQLMetric Name='SESSION_COUNT' Activate='true'>
        <Query>select count(*) as sid_count from v$session</Query>
        <Alert Activate='true' ComparisonColumn='SID_COUNT' ComparisonType='GT'>
            <WarningThreshold Value='100' />
        </Alert>
    </SQLMetric>

    <SQLMetric Name='STATEMENT_COUNT' Activate='true'>
        <Query>select count(*) as stmt_count from v$statement</Query>
        <Alert Activate='true' ComparisonColumn='STMT_COUNT' ComparisonType='GT'>
            <WarningThreshold Value='2000' />
        </Alert>
    </SQLMetric>

    <SQLMetric Name='MEM_GC' Activate='true'>
        <Query>select
                  gc_name,
               -- MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT gc_gap
               from v$memgc</Query>
        <Alert Activate='true' ComparisonColumn='GC_GAP' ComparisonType='GT'>
            <WarningThreshold Value='1000' />
        </Alert>
    </SQLMetric>

    <SQLMetric Name='BUFFER_STAT' Activate='true'>
        <Query>select victim_fails,READ_PAGES from v$buffpool_stat</Query>
    </SQLMetric>

    <SQLMetric Name='LOCK_DESC' Activate='true'>
        <Query>select b.session_id as sid, 
                   b.tx_id as tId, 
                   b.is_grant as isgran,
                   b.lock_desc as Ldesc, 
                   a.table_name as ltable,
                   trunc(c.total_time/1000000, 4) as TTime
            from system_.sys_tables_ a, v$lock_statement b, v$statement c
            where a.table_oid = b.table_oid
              and   c.session_id = b.session_id
              and   c.tx_id      = b.tx_id
              and   (c.total_time/1000000) > 1
            group by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc 
            order by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc  
        </Query>
    </SQLMetric>

    <SQLMetric Name='LONG_RUN_QUERY' Activate='true'>
        <Query>select to_char(sysdate, 'YYYY/MM/DD HH:MI:SS') cur_time,
                      start_time,
                      session_id sid,
                      comm_name ip,
                      client_pid pid,
                      stmt_id,
                      tx_id,
                      active_flag,
                      execute_flag,
                      begin_flag,
                      trunc(execute_time/1000000,2) rtime,
                      trunc(fetch_time/1000000,2) ftime,
                      trunc(total_time/1000000,2) ttime,
                      query
               from ( select CASE2(LAST_QUERY_START_TIME = 0, '1970/01/01 12:00:00',
                       TO_CHAR(TO_DATE('1970010109','YYYYMMDDHH') +
                       LAST_QUERY_START_TIME/60/60/24 , 'YYYY/MM/DD HH:MI:SS')) as start_time,
                             session_id,
                             id as stmt_id,
                             tx_id,
                             execute_time,
                             fetch_time,
                             total_time,
                             execute_flag,
                             begin_flag,
                             query
                      FROM v$statement) a, v$session b
               where a.session_id = b.id
                 and query not like '%LAST_QUERY_START_TIME%'
                 and total_time/1000000 > 1
                 --and (sysdate - to_date(start_time, 'YYYY/MM/DD HH:MI:SS'))*24*60*60 >= total_time
                 and IDLE_START_TIME = 0
                 and CURRENT_STMT_ID = stmt_id
               order by ttime desc
        </Query>
    </SQLMetric>

    <SQLMetric Name='UTRANS_QUERY' Activate='true'>
        <Query>SELECT 
                   ST.SESSION_ID AS SID,
                   SS.COMM_NAME AS IP,
                   SS.client_pid AS PID,
                   ST.ID AS STMT_ID, 
                   BASE_TIME - TR.FIRST_UPDATE_TIME AS UTRANS_TIME
              FROM V$TRANSACTION TR, V$STATEMENT ST, v$session SS, V$SESSIONMGR
             WHERE TR.ID = ST.TX_ID 
               AND ST.SESSION_ID = SS.ID
               AND TR.FIRST_UPDATE_TIME != 0
               AND (BASE_TIME - tr.FIRST_UPDATE_TIME) > 60</Query>
    </SQLMetric>

    <SQLMetric Name='REPLICATION_GAP' Activate='false' Logging='false'>
        <Query>SELECT REP_NAME, REP_GAP FROM V$REPGAP GROUP BY REP_NAME, REP_GAP LIMIT 1</Query>
        <Alert Activate='true' ComparisonColumn='REP_GAP' ComparisonType='GT'>
            <WarningThreshold Value='100000'>
                <ActionScript>rep_act.sh</ActionScript>
            </WarningThreshold>
        </Alert>
    </SQLMetric>

    <SQLMetric Name='SYSTEM_WAIT_CLASS' Activate='true'>
        <Query>SELECT WAIT_CLASS, TOTAL_WAITS, CASE2(SUM_WAITS=0, 0, ROUND(100 * (TOTAL_WAITS / SUM_WAITS),2)) PCT_WAITS,
                  TIME_WAITED, CASE2(SUM_TIME=0, 0, ROUND(100 * (TIME_WAITED / SUM_TIME),2)) PCT_TIME
             FROM ( SELECT WAIT_CLASS, TOTAL_WAITS, TIME_WAITED 
                      FROM V$SYSTEM_WAIT_CLASS 
                     wHERE WAIT_CLASS != 'Idle'),
                  ( SELECT sum(TOTAL_WAITS) SUM_WAITS, sum(TIME_WAITED) SUM_TIME
             FROM V$SYSTEM_WAIT_CLASS
            WHERE WAIT_CLASS != 'Idle')
            ORDER BY 5 DESC</Query>
    </SQLMetric>

    <SQLMetric Name='SESSION_EVENT' Activate='true'>
        <Query>SELECT SID, EVENT, TOTAL_WAITS, AVERAGE_WAIT, TIME_WAITED, TIME_WAITED_MICRO, AVERAGE_WAIT
             FROM V$SESSION_EVENT
            ORDER BY TOTAL_WAITS DESC
            LIMIT 10</Query>
    </SQLMetric>

    <SQLMetric Name='DB_EVENT' Activate='true'>
        <Query>SELECT WAIT_CLASS, EVENT, TOTAL_WAITS, TIME_WAITED_MICRO
             FROM V$SYSTEM_EVENT
            WHERE WAIT_CLASS != 'Idle'
            ORDER BY TIME_WAITED_MICRO DESC
            LIMIT 10</Query>
    </SQLMetric>

    <SQLMetric Name='DATAFILE_STAT' Activate='true'>
        <Query>SELECT B.NAME, A.SINGLEBLKRDS, A.SINGLEBLKRDTIM, TRUNC(A.SINGLEBLKRDTIM/A.SINGLEBLKRDS,2) AVERAGE_WAIT
             FROM V$FILESTAT A,
                  V$DATAFILES B
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND A.SINGLEBLKRDS > 0
            ORDER BY AVERAGE_WAIT DESC</Query>
    </SQLMetric>

    <SQLMetric Name='DATAFILE_STAT_2' Activate='true'>
        <Query>SELECT SUBSTR( B.NAME, 1, 128 ) NAME, A.PHYRDS PHY_RDS, A.PHYWRTS PHY_WRTS, A.PHYRDS + A.PHYWRTS TOTAL_IO,
                  TRUNC( A.PHYRDS / READ_SUM * 100, 2 ) READ_PER, TRUNC( A.PHYWRTS / WRITE_SUM * 100, 2 ) WRITE_PER,
                  TRUNC( ( A.PHYRDS + A.PHYWRTS ) / ( READ_SUM + WRITE_SUM ) * 100 , 2 ) TOTAL_IO_PER, A.AVGIOTIM AVG_IO_TIME
             FROM V$FILESTAT A,
                  V$DATAFILES B,
                  ( SELECT SUM(PHYRDS) READ_SUM, SUM(PHYWRTS) WRITE_SUM 
                      FROM V$FILESTAT ) C
            WHERE A.SPACEID = B.SPACEID
              AND A.FILEID = B.ID
              AND READ_SUM > 0
              AND WRITE_SUM > 0
            ORDER BY A.PHYRDS + A.PHYWRTS DESC, ROWNUM DESC</Query>
    </SQLMetric>

</Metrics>
